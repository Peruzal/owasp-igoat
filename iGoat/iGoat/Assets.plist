<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Authentication</key>
	<dict>
		<key>description</key>
		<string>This exercise category contains exercises relating to authentication issues. On iOS, local authentication is generally not an issue, but authenticating securely to a server application is. So, some or most of these exercises include some server-side code that needs to be run in order for the exercise to work. See each exercise&apos;s instructions for details.</string>
		<key>exercises</key>
		<array>
			<dict>
				<key>creditsFile</key>
				<string>KRvWAssociates.html</string>
				<key>description</key>
				<string>In this exercise, you&apos;re going to verify that an application&apos;s
                    authentication page is vulnerable to a &quot;coffee shop attack&quot; whereby
                    your username and password can be intercepted by an attacker on the
                    same network you&apos;re on.
                    
                    To simulate an attacker on the same network segment, we use a special
                    purpose Ruby web server that you&apos;ll run locally on your computer. It
                    will look for your login locally on a non-encrypted HTTP port
                    (8080). When it sees you&apos;ve submitted correct login credentials, it
                    assigns a fake session token and sends the token back to the iGoat
                    app. It also sends text to iGoat informing it that the username,
                    password, and session token have been exposed to a &quot;coffee shop
                    attack&quot;.
                    
                    Verifying the existance of the vulnerability is simple. First, launch
                    the Ruby server from a Terminal window by typing &quot;./igoat_server.rb&quot;
                    from the server folder under the folder where you&apos;ve installed the iGoat Xcode project. Next,
                    just login with a username of &quot;donkey&quot; and a password of &quot;hotey&quot;.
                    
                    If everything is working, iGoat will notify you that your credentials
                    have been exposed.
                    
                    (Optional, but highly recommended: This information can further be
                    validated by running a proxy tool such as BurpSuite to capture the
                    login information and view the entire HTTP request and response from
                    the server.)</string>
				<key>hints</key>
				<array>
					<string>Try logging in with a username of &quot;donkey&quot; and a password of &quot;hotey&quot;.</string>
					<string>If you received an error message, be sure to turn on the server, and then try again.</string>
					<string>To turn on the server, open a terminal window and run ./igoat_server.rb</string>
					<string>If you received a message telling you that your credentials were compromised, you&apos;ve finished the first part.</string>
				</array>
				<key>initialViewController</key>
				<string>RemoteAuthenticationExerciseController</string>
				<key>name</key>
				<string>Remote Authentication</string>
				<key>solution</key>
				<string>Verifying the existence of this weakness is quite easy with iGoat. The
                    exercise is written to send authentication data to a server without
                    the use of any SSL encryption. Simply submitting the authentication
                    data will result in the credentials being compromised in a simulated
                    &quot;coffee shop attack&quot;.
                    
                    The solution to this exercise is to use SSL to encrypt the login
                    credentials in transit. All else in the authentication mechanism will
                    remain the same.
                    
                    Using SSL in iOS is quite easy, as NSURL does much of the &quot;heavy
                    lifting&quot; in creating a simple SSL-encrypted HTTP connection. See 
                    the source code to the main view controller in the Server Communication 
                    exercise for a source code example of how to do this.
                </string>
			</dict>
		</array>
	</dict>
	<key>Data Protection (Rest)</key>
	<dict>
		<key>description</key>
		<string>Protecting sensitive data at rest on a mobile device is probably the toughest problem to solve, as small devices are easily lost or stolen. This exercise category contains exercises that help you internalize and understand what the issues are and how to deal with them, as well as what compromises are acceptable for different types of apps. There is, after all, no such thing as perfection here.</string>
		<key>exercises</key>
		<array>
			<dict>
				<key>initialViewController</key>
				<string>CutAndPasteExerciseController</string>
				<key>creditsFile</key>
				<string>KRvWAssociates.html</string>
				<key>description</key>
				<string>The cut and paste feature in iOS is enormously useful to the end user,
                    of course. Unfortunately, it can also lead to leakage of sensitive
                    user information. Once the data is in the buffer, any application (or
                    user) can paste that data inside other applications.
                    
                    In this exercise, you&apos;ll first exploit the weakness by finding some sensitive
                    data inside the cut and paste buffer.</string>
				<key>hints</key>
				<array>
					<string>Try copying some sensitive data in this exercise, and seeing what you can do with it.</string>
					<string>Exit iGoat and paste it into another app.</string>
					<string>If it successfully pasted outside of iGoat, then you&apos;ve leaked sensitive data.</string>
				</array>
				<key>name</key>
				<string>Cut-and-Paste</string>
				<key>solution</key>
				<string>To verify the existence of this exposure, launch the exercise, and
                    then use the cut and paste buffer to copy the username field
                    (&quot;donkey&quot;).
                    
                    Next, exit the exercise and paste the data into any other
                    application. This demonstrates that sensitive data can leak from the
                    application. In some cases, the application should protect itself from
                    allowing this information leakage.
                    
                    To remediate the weakness, the exercise must ensure the cut and paste
                    buffer is cleared of any sensitive data before the application exits
                    or backgrounds.
                    
                    Source code example is available in the exercise. Scroll to the bottom
                    of the view controller, below the copyright notice, and you will find
                    commented-out code. We encourage you to try to figure out the solution
                    prior to reverting to the commented source, however.</string>
			</dict>
			<dict>
				<key>initialViewController</key>
				<string>BackgroundingExerciseController</string>
				<key>creditsFile</key>
				<string>KRvWAssociates.html</string>
				<key>description</key>
				<string>A default behavior in iOS is to capture a JPG image of any application
                    screen as it is shut down or backgrounded. Unfortunately, the JPG file
                    is placed on the device without any form of access control or
                    encryption.
                    
                    In this exercise, you&apos;ll first exploit the weakness by finding some data
                    in the app&apos;s screen shot.</string>
				<key>hints</key>
				<array>
					<string>By default, iOS creates a plaintext screen shot in a JPG file
                        in any app when the user presses the home key. There is no
                        built-in protection to prevent sensitive data being stored in
                        this file.</string>
					<string>Use the app to enter some sensitive data, and then press the
                        home key.</string>
					<string>Verify that the sensitive data was stored in a JPG file on the
                        device.</string>
				</array>
				<key>name</key>
				<string>Backgrounding</string>
				<key>solution</key>
				<string>
                    Verifying the existence of this weakness is straight forward. Just
                    launch the exercise, and then background the app by pressing the
                    device&apos;s home key.
                    
                    Once the exercise is backgrounded, use Finder (on a simulator) or a
                    tool like iPhone Explorer (on a hardware device) to find the JPG file
                    containing the screen image.
                    
                    Verify that the data is plaintext and easily readable to anyone with
                    access to that JPG file, such as someone who has stolen an iPhone or
                    simply found a lost device.
                    
                    To prevent sensitive data from finding its way into the JPG screen
                    shots, it is necessary to control the backgrounding behavior of the
                    app. When an app backgrounds, iOS uses several methods that can all be
                    delegated and tailored in your app.
                    
                    It is vital that any sensitive data on the screen be set to HIDDEN
                    before the backgrounding is allowed to proceed, and then unhidden when
                    the app resumes. This makes the process transparent to the user, while
                    not exposing the user&apos;s sensitive data in the JPG file.
                </string>
			</dict>
			<dict>
				<key>initialViewController</key>
				<string>LocalDataStorageExerciseController</string>
				<key>creditsFile</key>
				<string>KRvWAssociates.html</string>
				<key>description</key>
				<string>In this exercise, you&apos;ll exploit an app that unsafely stores sensitive
                    data locally on the iOS device. In the lesson, the app stores data
                    using a local SQLite database file, but no encryption is used.
                    
                    Your task is to locate the database and find the sensitive data that
                    it contains.</string>
				<key>hints</key>
				<array>
					<string> SQLite is a built-in database that iOS apps can make use
                        of. By default, the database files are stored in plaintext on the iOS
                        device.</string>
					<string>Use the app to store some sensitive data into a SQLite
                        database.</string>
					<string>Now, go verify the sensitive data in the database file.</string>
				</array>
				<key>name</key>
				<string>Local Data Storage</string>
				<key>solution</key>
				<string>
                    SQLite is a handy built-in tool for storing data locally on an iOS
                    device. However, it provides no means of protecting its databases from
                    compromise at a disk level.
                    
                    This exercise illustrates this weakness. Launch the application and
                    place some sensitive data into the database.
                    
                    Next, exit the application and use Finder (if using the iOS Simulator)
                    or iPhone Explorer (if using an iOS device) and explore the
                    ~/Documents folder where iGoat is stored.
                    
                    You should find a database file called credentials.sqlite. Use a tool
                    such as hexdump to view this binary file, and look for the sensitive data.
                    You should find a plaintext string containing the information.
                    
                    To remediate the exercise, we use a special build of SQLite called
                    SQLcipher. It uses OpenSSL to encrypt the database file using AES-256
                    encryption.
                    
                    Initializing the SQLcipher database takes just a bit of extra code,
                    and then the rest of your SQLite code will work unchanged. You can
                    find an example of this commented in the source code.
                    
                    NOTE, though: In our example, we&apos;ve hard coded the encryption key into
                    the source code. This is a horrifically bad practice! How should it be
                    improved?
                </string>
			</dict>
			<dict>
				<key>initialViewController</key>
				<string>KeychainExerciseViewController</string>
				<key>creditsFile</key>
				<string>mansi.html</string>
				<key>description</key>
				<string>In this exercise, you&apos;ll exploit an app that stores sensitive data in cleartext on an iOS device. 

In this lesson,  user&apos;s credentials are stored in &quot;User Defaults&quot;. Your task is to locate that sensitive data on your iPhone/Simulator.</string>
				<key>hints</key>
				<array>
					<string>NSUserDefaults stores information in plist files, unencrypted on your iPhone/iOS Simulator.</string>
					<string>Enter your credentials and let it &quot;Remember me&quot;.</string>
					<string>Now, verify your credentials stored in Settings App. 

This information is also stored in:

                        ~/Library/Application Support/iPhone Simulator/&lt;{version}&gt;/Applications
                        &lt;{Bundle ID}&gt;/Library/Preferences/com.krvw.iGoat.plist</string>
				</array>
				<key>name</key>
				<string>Keychain Usage</string>
				<key>solution</key>
				<string>It can be easily verified in this exercise, that storing sensitive data in a plist (in this case User Defaults), is not a safe way since data is stored in clear text.

It is recommended by Apple to use the keychain on iPhone to store passwords and other sensitive data (such as digital certs, cookies, sftp accounts, instant messaging accounts etc) that can be used to log into secure web sites.

Keychain API usage is demonstrated in function &quot;storeCredentialsInKeychain&quot;. This function uses  &quot;SecItemAdd&quot;, &quot;SecItemCopyMatch&quot; and &quot;SecItemUpdate&quot; for adding, retrieving and updating items in an app&apos;s keychain.</string>
			</dict>
			<dict>
				<key>initialViewController</key>
				<string>KeystrokeLoggingExerciseController</string>
				<key>creditsFile</key>
				<string>rutger.html</string>
				<key>description</key>
				<string>The autocorrect spellchecker function of iOS is a famous feature of iOS, sometimes very useful and other times offering hilarious suggestions.
                
                    Less funny is the fact that it stores text that you have entered on your device. This data is retrievable if you know where to look. Make sure to run iGoat on the simulator if you want to do this exercise.
                </string>
				<key>hints</key>
				<array>
					<string>Type some text into the provided text fields.</string>
					<string>Make sure you make one or two typing mistakes to see autocorrect in action and verify that autocorrect is in use.</string>
					<string>When done entering data, close iGoat and see if you can retrieve the data that was suposedly stored on the simulator.</string>
				</array>
				<key>name</key>
				<string>Keystroke Logging</string>
				<key>solution</key>
				<string>To verify the existence of this exposure, launch the exercise, and
                    then enter some text into the fields. Make sure to use the autocorrect function by entering some misspelled words. Later you can try it without misspelling words and compare the behaviour.
                    
                    Once you are done entering text, close the iGoat app and open Finder to explore your iPhone simulator. ( /Users/[username]/Library/Application Support/iPhone Simulator/5.1 )
                    
                    Search for a file called dynamic-text.dat (it can be found in de Library/keyboard folder in your iOS simulator. Open this file in your favorite text editor (eg. Emacs, TextWrangler). You should be able to find familiar text in this file.
                    
                    This logging is performed to help autocorrect, the way to prevent this is to turn of autocorrect on your textfields and textviews. This can be done by code or in the Interface Builder.
                
                </string>
			</dict>
		</array>
	</dict>
	<key>Data Protection (Transit)</key>
	<dict>
		<key>description</key>
		<string>Arguably the second most important issue on mobile devices, protecting sensitive data in transit is a vital topic for developers to fully understand and address in their code. This exercise category contains exercises to help you clearly understand what the issues are.</string>
		<key>exercises</key>
		<array>
			<dict>
				<key>creditsFile</key>
				<string>KRvWAssociates.html</string>
				<key>initialViewController</key>
				<string>ServerCommunicationExerciseController</string>
				<key>description</key>
				<string>This exercise demonstrates the need for protecting sensitive data when it is in transit from the iOS device to the server. In the first step, you are presented with an authentication page. From there, you will log in using the provided account credentials--and see whether they get compromised in transit.</string>
				<key>hints</key>
				<array>
					<string>To communicate sensitive data with a server, the data must be secured in
                        transit.</string>
					<string>For this lesson, you will need to run a small (special purpose)
                        web server. It is located in the iGoat distribution, with a
                        filename of &quot;igoat_server.rb&quot;.</string>
					<string>Run the server from a terminal window by typing:
                        ./igoat_server.rb from the server folder in your iGoat distribution</string>
					<string>Now, run the exercise and send the data in the provided fields to the server by pressing the submit button.</string>
				</array>
				<key>name</key>
				<string>Server Communication</string>
				<key>solution</key>
				<string>Exploiting this weakness is easy. Just run the server process, and launch the exercise. In the exercise, submit the sensitive data (the user&apos;s account information) to the server.
                    
                    The server simulates a &quot;coffee shop attack&quot; that intercepts the user&apos;s data while it transits through the 
                    coffee shop&apos;s wifi network.
                    
                    Remediating this weakness is best done by using SSL encryption for all sensitive data communications with the 
                    server.
                    
                    Using SSL in iOS is quite easy, as NSURL does much of the &quot;heavy
                    lifting&quot; in creating a simple SSL-encrypted HTTP connection.
                </string>
			</dict>
		</array>
	</dict>
	<key>Injection Flaws</key>
	<dict>
		<key>description</key>
		<string>In this exercise category, you&apos;ll find exercises that pertain to malicious data injection attacks. These include several classic OWASP Top-10 issues such as SQL Injection, Cross-site scripting, and some iOS specific issues, such as URL redirection.</string>
		<key>exercises</key>
		<array>
			<dict>
				<key>initialViewController</key>
				<string>SQLInjectionExerciseController</string>
				<key>creditsFile</key>
				<string>KRvWAssociates.html</string>
				<key>description</key>
				<string>The purpose of this exercise is to demonstrate the danger of using an
                    SQLite query that&apos;s been dynamically-generated from user input, which presents
                    an obvious SQL injection vector.

                    The exercise is designed to mimic the interface to a searchable article
                    database provided by a local news outlet. There are two article categories:
                    free and premium. The goal is to trick the interface into granting the user
                    access to premium content in addition to the free.

                    Note: Simply omit the search term for a list of all [free] articles.
                </string>
				<key>hints</key>
				<array>
					<string>SQL injection can occur when unvalidated input is dynamically
                        attached to a SQL query.</string>
					<string> Local SQLite databases on an iOS device are just as susceptible
                        to SQLi as those on a remote server.</string>
					<string>Try placing a SQLi attack in one of the text fields in this
                        lesson.</string>
					<string>Start by putting a single quote (@apos;) character into a text
                        field.</string>
					<string>Try one of the dreaded 1=1 attacks next to see if you can dump
                        all the data in the database.</string>
				</array>
				<key>name</key>
				<string>SQL Injection</string>
				<key>solution</key>
				<string>The SQL call in this exercise is written to use simple dynamically
                    built string queries. These are entirely exploitable with classic SQL
                    Injection techniques, like those described in the OWASP Top 10.
                    
                    To steal the data from this database, a simple attack like: @apos; or 1=1--
                    will do the trick.
                
                    Remediating the problem is also quite straight forward. Rather than
                    using dynamic strings for your query, you will need to use a
                    parameterized query API.
                </string>
			</dict>
		</array>
	</dict>
</dict>
</plist>
